// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages/matchmake_result.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SpinnerKing.Interop {

  /// <summary>Holder for reflection information generated from messages/matchmake_result.proto</summary>
  public static partial class MatchmakeResultReflection {

    #region Descriptor
    /// <summary>File descriptor for messages/matchmake_result.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchmakeResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9tZXNzYWdlcy9tYXRjaG1ha2VfcmVzdWx0LnByb3RvEhRjb20ucHJvamVj",
            "dHguaW50ZXJvcBofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoV",
            "ZW51bXMvZ2FtZV9tb2RlLnByb3RvGhxlbnVtcy9tYXRjaG1ha2Vfc3RhdHVz",
            "LnByb3RvGiFtZXNzYWdlcy9tYXRjaG1ha2luZ19wbGF5ZXIucHJvdG8i3AIK",
            "D01hdGNobWFrZVJlc3VsdBI1CgZzdGF0dXMYASABKA4yJS5jb20ucHJvamVj",
            "dHguaW50ZXJvcC5NYXRjaG1ha2VTdGF0dXMSMQoJZ2FtZV9tb2RlGAIgASgO",
            "Mh4uY29tLnByb2plY3R4LmludGVyb3AuR2FtZU1vZGUSDwoHcm9vbV9pZBgD",
            "IAEoBRITCgtzZXJ2ZXJfbmFtZRgEIAEoCRITCgtzZXJ2ZXJfcG9ydBgFIAEo",
            "BRI4CgdwbGF5ZXJzGAYgAygLMicuY29tLnByb2plY3R4LmludGVyb3AuTWF0",
            "Y2htYWtpbmdQbGF5ZXISKwoHZXhwaXJlcxgHIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASLQoJdGltZXN0YW1wGAggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIOCgZtYXBfaWQYCSABKAVCE6oCEFByb2plY3RY",
            "LkludGVyb3BiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::SpinnerKing.Interop.GameModeReflection.Descriptor, global::SpinnerKing.Interop.MatchmakeStatusReflection.Descriptor, global::SpinnerKing.Interop.MatchmakingPlayerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SpinnerKing.Interop.MatchmakeResult), global::SpinnerKing.Interop.MatchmakeResult.Parser, new[]{ "Status", "GameMode", "RoomId", "ServerName", "ServerPort", "Players", "Expires", "Timestamp", "MapId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MatchmakeResult : pb::IMessage<MatchmakeResult> {
    private static readonly pb::MessageParser<MatchmakeResult> _parser = new pb::MessageParser<MatchmakeResult>(() => new MatchmakeResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakeResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SpinnerKing.Interop.MatchmakeResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeResult(MatchmakeResult other) : this() {
      status_ = other.status_;
      gameMode_ = other.gameMode_;
      roomId_ = other.roomId_;
      serverName_ = other.serverName_;
      serverPort_ = other.serverPort_;
      players_ = other.players_.Clone();
      expires_ = other.expires_ != null ? other.expires_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      mapId_ = other.mapId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakeResult Clone() {
      return new MatchmakeResult(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::SpinnerKing.Interop.MatchmakeStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SpinnerKing.Interop.MatchmakeStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 2;
    private global::SpinnerKing.Interop.GameMode gameMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SpinnerKing.Interop.GameMode GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 4;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 5;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SpinnerKing.Interop.MatchmakingPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(50, global::SpinnerKing.Interop.MatchmakingPlayer.Parser);
    private readonly pbc::RepeatedField<global::SpinnerKing.Interop.MatchmakingPlayer> players_ = new pbc::RepeatedField<global::SpinnerKing.Interop.MatchmakingPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SpinnerKing.Interop.MatchmakingPlayer> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "expires" field.</summary>
    public const int ExpiresFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expires_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Expires {
      get { return expires_; }
      set {
        expires_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "map_id" field.</summary>
    public const int MapIdFieldNumber = 9;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakeResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakeResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (GameMode != other.GameMode) return false;
      if (RoomId != other.RoomId) return false;
      if (ServerName != other.ServerName) return false;
      if (ServerPort != other.ServerPort) return false;
      if(!players_.Equals(other.players_)) return false;
      if (!object.Equals(Expires, other.Expires)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (MapId != other.MapId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (GameMode != 0) hash ^= GameMode.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      hash ^= players_.GetHashCode();
      if (expires_ != null) hash ^= Expires.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (GameMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServerName);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerPort);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (expires_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Expires);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Timestamp);
      }
      if (MapId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (expires_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expires);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakeResult other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.GameMode != 0) {
        GameMode = other.GameMode;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      players_.Add(other.players_);
      if (other.expires_ != null) {
        if (expires_ == null) {
          Expires = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Expires.MergeFrom(other.Expires);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::SpinnerKing.Interop.MatchmakeStatus) input.ReadEnum();
            break;
          }
          case 16: {
            GameMode = (global::SpinnerKing.Interop.GameMode) input.ReadEnum();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 34: {
            ServerName = input.ReadString();
            break;
          }
          case 40: {
            ServerPort = input.ReadInt32();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 58: {
            if (expires_ == null) {
              Expires = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Expires);
            break;
          }
          case 66: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 72: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
